// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Status {
    ACTIVE
    PENDING
    DISABLED
}

model Account {
    id                       String   @id @default(cuid())
    createdAt                DateTime @default(now())
    updatedAt                DateTime @updatedAt
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?  @db.VarChar(500)
    access_token             String?  @db.VarChar(500)
    refresh_token_expires_in Int?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?  @db.Text
    session_state            String?
    oauth_token_secret       String?
    oauth_token              String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime
    user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String?
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    password      String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    words         Word[]
    searches      Search[]
    favorites     Favorite[]
    status        Status     @default(ACTIVE)
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Word {
    id           String              @id @default(uuid())
    abbreviation String              @unique
    definition   String
    description  String?
    user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
    categories   CategoriesOnWords[]
    favorites    Favorite[]
    searches     Search[]
    hit          Int                 @default(0)
    status       Status              @default(ACTIVE)
    ai           Boolean             @default(false)
    createdAt    DateTime            @default(now())
    updatedAt    DateTime            @updatedAt

    @@index([userId])
}

model Category {
    id        String              @id @unique
    words     CategoriesOnWords[]
    createdAt DateTime            @default(now())
    updatedAt DateTime            @updatedAt
}

model CategoriesOnWords {
    word       Word     @relation(fields: [wordId], references: [id])
    wordId     String
    category   Category @relation(fields: [categoryId], references: [id])
    categoryId String

    @@id([wordId, categoryId])
}

model Search {
    query     String
    word      Word     @relation(fields: [wordId], references: [id], onDelete: Cascade)
    wordId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([wordId, userId])
}

model Favorite {
    id        String   @id @default(uuid())
    word      Word     @relation(fields: [wordId], references: [id], onDelete: Cascade)
    wordId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([wordId, userId])
}
